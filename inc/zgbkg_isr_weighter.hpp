//this file was auto-generated by convert_dnn_to_cpp.py
#ifndef H_ZGBKG_ISR_WEIGHTER
#define H_ZGBKG_ISR_WEIGHTER

#include <cmath>
#include <vector>

/*!\class ZgBkgIsrWeighter
 virtual class to allow for polymorphism with run 2 and run 3 weighters
 */
class ZgBkgIsrWeighter {
public: 
  virtual ~ZgBkgIsrWeighter() = default;
  virtual float evaluate(std::vector<float> input) const = 0;
};

/*!\class kinr2_weighter
 class containing DNN such as one produced by TensorFlow
 */
class kinr2_weighter : public ZgBkgIsrWeighter{
public:
  /*!\brief Standard constrctor for initializing DNN
   */
  kinr2_weighter();

  enum class ActivationType{relu, elu, sigmoid};

  /*!\brief evaluates DNN score at a point input
   */
  float evaluate(std::vector<float> input) const;

private:
  std::vector<float> scale(std::vector<float> input) const;
  float dot_product(std::vector<float> x, std::vector<float> y) const;
  float relu(float x) const;
  float elu(float x) const;
  float sigmoid(float x) const;

  unsigned n_layer;
  unsigned n_input;
  std::vector<float> scale_lamb;
  std::vector<float> scale_mean;
  std::vector<float> scale_stdv;
  std::vector<unsigned> n_unit;
  std::vector<kinr2_weighter::ActivationType> activation_type;
  std::vector<std::vector<std::vector<float>>> weight;
  std::vector<std::vector<float>> bias;
};

/*!\class kinr3_weighter
 class containing DNN such as one produced by TensorFlow
 */
class kinr3_weighter : public ZgBkgIsrWeighter{
public:
  /*!\brief Standard constrctor for initializing DNN
   */
  kinr3_weighter();

  enum class ActivationType{relu, elu, sigmoid};

  /*!\brief evaluates DNN score at a point input
   */
  float evaluate(std::vector<float> input) const;

private:
  std::vector<float> scale(std::vector<float> input) const;
  float dot_product(std::vector<float> x, std::vector<float> y) const;
  float relu(float x) const;
  float elu(float x) const;
  float sigmoid(float x) const;

  unsigned n_layer;
  unsigned n_input;
  std::vector<float> scale_lamb;
  std::vector<float> scale_mean;
  std::vector<float> scale_stdv;
  std::vector<unsigned> n_unit;
  std::vector<kinr3_weighter::ActivationType> activation_type;
  std::vector<std::vector<std::vector<float>>> weight;
  std::vector<std::vector<float>> bias;
};

#endif
