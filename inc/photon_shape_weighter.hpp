//this file was auto-generated by convert_dnn_to_cpp.py
//..and then edited by hand a bit to be easier to work with nano2pico
#ifndef H_PHOTON_SHAPE_WEIGHTER
#define H_PHOTON_SHAPE_WEIGHTER

#include <cmath>
#include <vector>

/*!\class PhotonShapeWeighter
 virtual class to allow for polymorphism with run 2 and run 3 weighters
 */
class PhotonShapeWeighter {
public: 
  virtual ~PhotonShapeWeighter() = default;
  virtual float evaluate(std::vector<float> input) const = 0;
};

/*!\class rw_mmp
 class containing DNN such as one produced by TensorFlow
 */
class rw_mmp : public PhotonShapeWeighter{
public:
  /*!\brief Standard constrctor for initializing DNN
   */
  rw_mmp();

  enum class ActivationType{relu, elu, sigmoid};

  /*!\brief evaluates DNN score at a point input
   */
  float evaluate(std::vector<float> input) const;

private:
  std::vector<float> scale(std::vector<float> input) const;
  float dot_product(std::vector<float> x, std::vector<float> y) const;
  float relu(float x) const;
  float elu(float x) const;
  float sigmoid(float x) const;

  unsigned n_layer;
  unsigned n_input;
  std::vector<float> scale_lamb;
  std::vector<float> scale_mean;
  std::vector<float> scale_stdv;
  std::vector<unsigned> n_unit;
  std::vector<rw_mmp::ActivationType> activation_type;
  std::vector<std::vector<std::vector<float>>> weight;
  std::vector<std::vector<float>> bias;
};

/*!\class rw_mmp_r3
 class containing DNN such as one produced by TensorFlow
 */
class rw_mmp_r3 : public PhotonShapeWeighter {
public:
  /*!\brief Standard constrctor for initializing DNN
   */
  rw_mmp_r3();

  enum class ActivationType{relu, elu, sigmoid};

  /*!\brief evaluates DNN score at a point input
   */
  float evaluate(std::vector<float> input) const;

private:
  std::vector<float> scale(std::vector<float> input) const;
  float dot_product(std::vector<float> x, std::vector<float> y) const;
  float relu(float x) const;
  float elu(float x) const;
  float sigmoid(float x) const;

  unsigned n_layer;
  unsigned n_input;
  std::vector<float> scale_lamb;
  std::vector<float> scale_mean;
  std::vector<float> scale_stdv;
  std::vector<unsigned> n_unit;
  std::vector<rw_mmp_r3::ActivationType> activation_type;
  std::vector<std::vector<std::vector<float>>> weight;
  std::vector<std::vector<float>> bias;
};

#endif
